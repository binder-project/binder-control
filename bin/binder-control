#!/usr/bin/env node
var _ = require('lodash')
var hat = require('hat')
var async = require('async')
var path = require('path')
var fs = require('fs')
var program = require('commander')
var shell = require('shelljs')
var format = require('string-format')
format.extend(String.prototype)

var services = require('../lib/services.js')

var parseConfig = function (path, cb) {
  fs.readFile(path, function (err, contents) {
    if (err) return cb(err)
    return cb(null, JSON.parse(contents))
  })
}

program
  .version('0.0.1')

program
  .command('build', 'Manager the build server')
  .command('deploy-kubernetes', 'Manage the Kubernetes deployment backend')
  .command('web', 'Manage the web server')

program
  .command('build-images')
  .description('Build all Docker images required during the boostrapping process')
  .action(function () {
    services.buildImages()
  })

program
  .command('start-service [name]')
  .option('-c, --config <path>', 'set config path. defaults to ../conf/example.json')
  .description('Start a single Binder service (db, logging, or kubernetes)')
  .action(function (name, options) {
    console.log('name is: {0}'.format(name))
    var configFile = options.config || path.join(__dirname, '../conf/example.json')
    async.waterfall([
      _.partial(parseConfig, configFile),
      _.partial(services.startService, name)
    ], function (err) {
      if (err) {
        console.error('Failed to start service {0}: {1}'.format(name, err))
        process.exit(2)
      }
      console.log('Started service {0} successfully'.format(name))
      process.exit(1)
    })
  })

program
  .command('stop-service [name]')
  .option('-c, --config <path>', 'set config path. defaults to ../conf/example.json')
  .description('Stop a single Binder service (db, logging, or kubernetes)')
  .action(function (name, options) {
    var configFile = options.config || path.join(__dirname, '../conf/example.json')
    var stopPM2 = function (next) {
      shell.exec('pm2 delete binder-{0}-service'.format(name), function (err) {
        return next(err)
      })
    }
    async.waterfall([
      _.partial(parseConfig, configFile),
      _.partial(services.stopService, name),
      stopPM2
    ], function (err) {
      if (err) {
        console.error('Failed to stop service {0}: {1}'.format(name, err))
        process.exit(2)
      }
      console.log('Stopped service {0} successfully'.format(name))
      process.exit(1)
    })
  })

program
  .command('start-services')
  .option('-c, --config <path>', 'set config path. defaults to ../conf/example.json')
  .description('Start binder-db, binder-logging, and binder-kubernetes services')
  .action(function (options) {
    var configFile = options.config || path.join(__dirname, '../conf/example.json')
    async.waterfall([
      services.buildImages,
      _.partial(parseConfig, configFile),
      _.partial(services.startServices)
    ], function (err) {
      if (err) {
        console.error('Failed to start services: {0}'.format(err))
        process.exit(2)
      }
      console.log('Started services successfully')
      process.exit(1)
    })
  })

program
  .command('stop-services')
  .option('-c, --config <path>', 'set config path. defaults to ../conf/example.json')
  .description('Stop all utility services (binder-db, binder-logging and binder-kubernetes)')
  .action(function (options) {
    var configFile = options.config || path.join(__dirname, '../conf/example.json')
    var stopPM2 = function (next) {
      shell.exec('pm2 delete all', function (err) {
        return next(err)
      })
    }
    async.waterfall([
      _.partial(parseConfig, configFile),
      services.stopServices,
      stopPM2
    ], function (err) {
      if (err) {
        console.error('Failed to stop services: {0}'.format(err))
        process.exit(2)
      }
      console.log('Stopped services successfully')
      process.exit(0)
    })
  })

program
  .command('status')
  .description('Show information about all running Binder servers/services')
  .action(function () {
    console.log('Running Binder servers:')
    shell.exec('pm2 list')
  })

program
  .command('list-backends')
  .alias('backends')
  .description('List all available deployment backends')
  .action(function () {
    console.log('Available backends:')
    _.forEach(_.keys(backends), function (backend) {
      console.log(' - ' + backend)
    })
  })

program
  .command('stop-all')
  .description('Stop all Binder servers/services')
  .action(function () {
    shell.exec('pm2 delete all')
  })

program.parse(process.argv)
