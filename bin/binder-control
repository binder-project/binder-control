#!/usr/bin/env node
var _ = require('lodash')
var path = require('path')
var fs = require('fs')
var program = require('commander')
var shell = require('shelljs')
var format = require('string-format')
format.extend(String.prototype)

var services = require('../lib/services.js')

// TODO: better backend management
var backends = {
  kubernetes: {
    start: function (opts) {
    }
  }
}

program
  .version('0.0.1')

program
  .command('build', 'Manage the build server')
  .command('registry', 'Manage the registry server')
  .command('deploy', 'Manage all deployment backends')

program
  .command('build-images')
  .description('Build all Binder images required during the boostrapping process')
  .action(function () {
    services.buildImages()
  })

program
  .command('init')
  .option('-c, --config <path>', 'set config path. defaults to ../conf/example.json')
  .description('Start binder-db and binder-logging services')
  .action(function (options) {
    var configFile = options.config || path.join(__dirname, '../conf/example.json')
    fs.readFile(configFile, function (err, contents) {
      if (err) {
        console.error('could not read config file: {0}'.format(err))
        process.exit(1)
      }
      var initConfig = JSON.parse(contents)
      services.buildImages()
      services.startServices(initConfig)
    })
  })

program
  .command('status')
  .description('Show information about all running Binder servers/services')
  .action(function () {
    console.log('Running Binder servers:')
    shell.exec('pm2 list')
  })

program
  .command('start-deploy <backend>')
  .description('Start a deploy backend server')
  .alias('deploy')
  .option('-a, --apiKey [key]', 'API key for authorizing administrative requests')
  .action(function (backend, options) {
    var supportedBackends = _.keys(backends)
    if (backend in supportedBackends) {
      var startFunc = backends[backend].start
      startFunc(options)
    } else {
      console.error('backend ' + backend + ' not supported!')
      process.exit(1)
    }
    console.log('Starting deploy with backend: ' + backend)
  })

program
  .command('list-backends')
  .alias('backends')
  .description('List all available deployment backends')
  .action(function () {
    console.log('Available backends:')
    _.forEach(_.keys(backends), function (backend) {
      console.log(' - ' + backend)
    })
  })

program
  .command('start-all')
  .alias('all')
  .option('-f, --config-file [conf]', 'Launch all servers using their default config files')
  .action(function (options) {
  })

program
  .command('stop-all')
  .description('Stop all Binder servers/services')
  .action(function () {
    shell.exec('pm2 delete all')
  })

program.parse(process.argv)
